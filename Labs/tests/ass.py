from tkinter import * 
#import sys
#import os

#определяем список выпросов с вариантами ответов
question = {
    "Что такое интернет-банкинг?":[
        "Это система оплаты товаров и услуг через интернет", 
        "Это возможность получать кредиты через интернет", 
        "Это сервис для управления своими финансами через интернет"
        ], 
    "Какие операции можно совершать через интернет-банкинг?":["Платить за коммунальные услуги","Оплачивать кредиты", "Переводить деньги на другие счета", "Все вышеперечисленные операции"],
    "Каким образом происходит авторизация в интернет-банкинге?":["По звонку в банк","По смс-коду","По логину и паролю", "По паспорту"],
    "Что такое двухфакторная аутентификация?":["Авторизация с помощью логина и пароля", "Авторизация с помощью смс-кода и логина", " Авторизация с помощью смс-кода и отпечатка пальца", "Авторизация с помощью логина, пароля и отпечатка пальца"],
    "Можно ли перевести деньги на карту другого банка через интернет-банкинг?":["Нет, нельзя", "Можно, но только в пределах одного банка", "Можно, независимо от банка получателя"],
    "Какие меры безопасности следует соблюдать при использовании интернет-банкинга?":["Никому не сообщать логин и пароль", "Не открывать подозрительные письма и ссылки", "Проверять наличие защищенного соединения (https)", "Все вышеперечисленные меры"],
    "Какие возможности предоставляет интернет-банкинг для управления счетами?":["Просмотр баланса и движения средств", "Оплата коммунальных услуг", "Перевод денег на другие счета", "Все вышеперечисленные возможности"],
    "Какие преимущества имеет использование интернет-банкинга?":["Удобство использования", "Экономия времени на походы в банк", "Возможность оперировать счетами в любое время суток", "Все вышеперечисленные преимущества"],
    "Можно ли использовать интернет-банкинг с мобильного устройства?":["Нет, только с компьютера", "Да, только с телефона", "Да, с любого мобильного устройства с доступом в интернет"],
    "Какие виды интернет-банкинга существуют?":["Мобильный и настольный", "SMS-банкинг и мобильный", "SMS-банкинг и настольный", "Мобильный и онлайн"],
    "Можно ли заблокировать доступ к интернет-банкингу в случае утери устройства?":["Нет, нельзя", "Можно, но только через звонок в банк", "Можно, через личный кабинет в интернет-банкинге"],
    "Какие риски связаны с использованием интернет-банкинга?":["Возможность потери личных данных", "Возможность потери денежных средств", "Возможность взлома системы", "Все вышеперечисленные риски"],
    "Какие меры безопасности предусмотрены банками для защиты интернет-банкинга?":["Двухфакторная аутентификация", "Защищенное соединение (https)", "Контрольный список операций", "Все вышеперечисленные меры"],
    "Какие возможности предоставляет интернет-банкинг для ведения бухгалтерии?":["Просмотр отчетов о движении средств", "Составление счетов на оплату", "Просмотр выписок по счетам", "Все вышеперечисленные возможности"],
    "Можно ли открыть счет через интернет-банкинг?":["Нет, нельзя", "Можно, но только в определенных банках", "Можно, независимо от банка"],
    }
#определяем правильные ответы
ans = [
    "Это сервис для управления своими финансами через интернет", 
    "Все вышеперечисленные операции", 
    "По логину и паролю",
    "Авторизация с помощью смс-кода и логина",
    "Можно, независимо от банка получателя",
    "Все вышеперечисленные меры",
    "Все вышеперечисленные возможности",
    "Все вышеперечисленные преимущества",
    "Да, с любого мобильного устройства с доступом в интернет",
    "Мобильный и онлайн",
    "Можно, через личный кабинет в интернет-банкинге",
    "Все вышеперечисленные риски",    
    "Все вышеперечисленные меры",
    "Все вышеперечисленные возможности",
    "Можно, но только в определенных банках",
    ]

#кол-во вопросов
current_question = 0

def start_quiz():
    start_button.forget()
    next_button.pack()
    next_question()

def next_question():
    global current_question
    if current_question < len(question):
        # get key or question that need to be printed
        check_ans()
        user_ans.set('None')
        c_question = list(question.keys())[current_question]
        # clear frame to update its content        
        clear_frame()
        # printing question
        Label(f1,text=f"Вопрос : {c_question}",padx=15,font="calibre 12 normal").pack(anchor=NW)
        # printing options
        for option in question[c_question]:
            Radiobutton(f1,text=option,variable=user_ans,value=option,padx=28).pack(anchor=NW)
        current_question+=1
    else:
        next_button.forget()
        check_ans()
        clear_frame()
        output = f"Кол-во правильных ответов: {user_score.get()} из {len(question)}"
        Label(f1,text=output,font="calibre 25 bold").pack()
        Label(f1,text="Спасибо",font="calibre 18 bold").pack()
        close_button.pack()
        #return_to_start_button.pack()
        #Button(root, text="Пройти заново", command=restart_program).pack()
        #return_to_start_button.pack()

def check_ans():
    temp_ans = user_ans.get()
    if temp_ans != 'None' and temp_ans==ans[current_question-1]:
        user_score.set(user_score.get()+1)

def clear_frame():
    for widget in f1.winfo_children():
        widget.destroy()

""" def restart_program():
    return_to_start_button.forget()
    close_button.forget()
    clear_frame()    
    current_question = 0
    next_button.pack()
    next_question()
 """

if __name__ == "__main__":
    root = Tk()
    # setup basic window
    root.title("Тестирование по теме Интернет-банкинг")
    root.geometry("850x520")
    #root.config(bg="#58a9bb")
    root.minsize(800, 400)
    user_ans = StringVar()
    user_ans.set('None')
    user_score = IntVar()
    user_score.set(0)
 
    Label(root, text="Тестирование", font="calibre 40 bold",).pack()
    Label(root, text="", font="calibre 10 bold").pack()
    start_button = Button(root, text="Начать", command=start_quiz, font="calibre 17 bold")
    start_button.pack()

    f1 = Frame(root)
    f1.pack(side=TOP, fill = X)
 
    next_button = Button(root, text="Следующий вопрос",
                         command=next_question,
                         font="calibre 17 bold")
    
    close_button = Button(root, text="Закончить тестирование", command=root.quit, font="calibre 17 bold", padx=5, pady=5) #кнопка закрытия
    return_to_start_button = Button(root, text="Заново пройти тестирование", command=restart_program, font="calibre 17 bold", padx=5, pady=5) #конпка возврата на начало тестирования
   
    root.mainloop()